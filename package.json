{
	"name": "vhdl-linter",
	"publisher": "g0t00",
	"main": "./dist/lib/vscode.js",
	"description": "A typescript based linter for vhdl",
	"keywords": [],
	"repository": "https://github.com/vhdl-linter/vhdl-linter",
	"license": "GPL-3.0",
	"icon": "doc/logo.png",
	"engines": {
		"vscode": "^1.42.0"
	},
	"bin": {
		"vhdl-linter": "dist/lib/cli/cli.js"
	},
	"contributes": {
		"yamlValidation": [
			{
				"fileMatch": "vhdl-linter.yml",
				"url": "./settings.schema.json"
			}
		],
		"languages": [
			{
				"id": "vhdl",
				"aliases": [
					"VHDL",
					"vhdl"
				],
				"extensions": [
					".vhd",
					".vhdl",
					".vho",
					".vht"
				],
				"configuration": "./language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "vhdl",
				"scopeName": "source.vhdl",
				"path": "./syntaxes/vhdl.json"
			}
		],
		"snippets": [
			{
				"language": "vhdl",
				"path": "./snippets/snippets.json"
			}
		],
		"keybindings": [
			{
				"key": "ctrl+shift+c ctrl+shift+s",
				"command": "vhdl-linter:copy-as-signals",
				"when": "editorLangId == vhdl"
			},
			{
				"key": "ctrl+shift+g ctrl+shift+c",
				"command": "vhdl-linter:copy-as-component",
				"when": "editorLangId == vhdl"
			},
			{
				"key": "ctrl+shift+i",
				"command": "vhdl-linter:copy-as-instance",
				"when": "editorLangId == vhdl"
			},
			{
				"key": "ctrl+alt+s",
				"command": "vhdl-linter:copy-as-sysverilog",
				"when": "editorLangId == vhdl"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "vhdl-linter:copy-as-instance",
					"when": "editorLangId == vhdl"
				},
				{
					"command": "vhdl-linter:copy-as-sysverilog",
					"when": "editorLangId == vhdl"
				},
				{
					"command": "vhdl-linter:copy-as-signals",
					"when": "editorLangId == vhdl"
				},
				{
					"command": "vhdl-linter:copy-as-component",
					"when": "editorLangId == vhdl"
				}
			]
		},
		"commands": [
			{
				"command": "vhdl-linter:copy-as-instance",
				"title": "Copy as Instance"
			},
			{
				"command": "vhdl-linter:copy-as-sysverilog",
				"title": "Copy as System Verilog"
			},
			{
				"command": "vhdl-linter:copy-as-signals",
				"title": "Copy as Signals"
			},
			{
				"command": "vhdl-linter:copy-as-component",
				"title": "Copy as Component"
			}
		],
		"configuration": [
			{
				"type": "object",
				"title": "vhdl-linter",
				"properties": {
					"VhdlLinter.trace.server": {
						"scope": "window",
						"type": "string",
						"enum": [
							"off",
							"messages",
							"verbose"
						],
						"default": "off",
						"description": "Traces the communication between VS Code and the language server."
					},
					"VhdlLinter.paths.additional": {
						"scope": "window",
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "Additional Paths to be included (for verification library etc.)"
					},
					"VhdlLinter.paths.libraryMapFiles": {
						"scope": "window",
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"vunit*.csv"
						],
						"description": "Glob expressions for files that contain a library, source file mapping in the format `library,filename`."
					},
					"VhdlLinter.paths.ignoreRegex": {
						"scope": "window",
						"type": "string",
						"deprecationMessage": "This is being deprecated in favor of `paths.ignoreFiles`",
						"default": "",
						"description": "Regex for files to be ignored by the Project Parser"
					},
					"VhdlLinter.paths.ignoreFiles": {
						"scope": "window",
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [],
						"description": "Glob expressions for files to be ignored by the project parser"
					},
					"VhdlLinter.analysis.verilogAnalysis": {
						"scope": "window",
						"type": "boolean",
						"default": true,
						"description": "Enable analysis of verilog files. Only modules get extracted and evaluated for instantiation from vhdl files."
					},
					"VhdlLinter.analysis.conditionalAnalysis": {
						"scope": "window",
						"type": "object",
						"properties": {},
						"patternProperties": {
							"": {
								"type": "string"
							}
						},
						"additionalProperties": false,
						"default": {},
						"description": "Settings for conditional analysis (vhdl 2019). e.g. DEVICE = MY_DEV_BOARD or use standard defined values: TOOL_TYPE = SYNTHESIS"
					},
					"VhdlLinter.semanticTokens": {
						"scope": "window",
						"type": "boolean",
						"default": true,
						"description": "Enable semantic tokens which enhance syntax highlighting. "
					},
					"VhdlLinter.semanticTokensDirectionColoring": {
						"scope": "window",
						"type": "boolean",
						"default": false,
						"description": "Color inputs differently than outputs."
					}
				}
			},
			{
				"type": "object",
				"title": "Rules",
				"properties": {
					"VhdlLinter.rules.coding-style": {
						"scope": "window",
						"type": "boolean",
						"description": "Enforce rules for enforcing coding style.",
						"default": true
					},
					"VhdlLinter.rules.consistent-casing": {
						"scope": "window",
						"type": "boolean",
						"description": "Enforce consistent casing ie. check if declaration and reference have the same case",
						"default": false
					},
					"VhdlLinter.rules.component": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if component declarations are correct.",
						"default": true
					},
					"VhdlLinter.rules.instantiation": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if ports and generics of instantiations are correct.",
						"default": true
					},
					"VhdlLinter.rules.configuration": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if configuration reference existing entity.",
						"default": true
					},
					"VhdlLinter.rules.multiple-definition": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if something is defined multiple times.",
						"default": true
					},
					"VhdlLinter.rules.not-declared": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if something is used but not declared",
						"default": true
					},
					"VhdlLinter.rules.naming-style": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if objects match the prefix/suffix given in style.*.",
						"default": true
					},
					"VhdlLinter.rules.casing-style": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if objects match the casing given in style.*.",
						"default": true
					},
					"VhdlLinter.rules.type-checking": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable some basic type checking",
						"default": true
					},
					"VhdlLinter.rules.type-resolved": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if ports and signals have the resolved/unresolved type given in 'style.preferredLogicType*.'",
						"default": true
					},
					"VhdlLinter.rules.unused": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to warn for unused objects.",
						"default": true
					},
					"VhdlLinter.rules.use-clause": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check use clauses.",
						"default": true
					},
					"VhdlLinter.rules.empty": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to warn for empty files.",
						"default": true
					},
					"VhdlLinter.rules.constant-write": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to warn when writing a constant value.",
						"default": true
					},
					"VhdlLinter.rules.parser": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable displaying parser errors.",
						"default": true
					},
					"VhdlLinter.rules.unit": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if a space is before a unit reference",
						"default": true
					},
					"VhdlLinter.rules.not-allowed": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if declarations are allowed where they are used.",
						"default": true
					},
					"VhdlLinter.rules.order": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if all references are after the corresponding declaration (when in the same file).",
						"default": true
					},
					"VhdlLinter.rules.attribute": {
						"scope": "window",
						"type": "boolean",
						"description": "Enable the rule to check if all attributes have prefixes.",
						"default": true
					}
				}
			},
			{
				"type": "object",
				"title": "Style",
				"properties": {
					"VhdlLinter.style.preferredLogicTypePort": {
						"scope": "window",
						"type": "string",
						"enum": [
							"unresolved",
							"resolved",
							"ignore"
						],
						"default": "unresolved",
						"description": "Preferred logic type (resolved/unresolved) to check for on ports (The rule 'type-resolved' can also be ignored as a whole)."
					},
					"VhdlLinter.style.preferredLogicTypeSignal": {
						"scope": "window",
						"type": "string",
						"enum": [
							"unresolved",
							"resolved",
							"ignore"
						],
						"default": "unresolved",
						"description": "Preferred logic type (resolved/unresolved) to check for on signals (The rule 'type-resolved' can also be ignored as a whole)."
					},
					"VhdlLinter.style.preferredLogicTypeRecordChild": {
						"scope": "window",
						"type": "string",
						"enum": [
							"unresolved",
							"resolved",
							"ignore"
						],
						"default": "unresolved",
						"description": "Preferred logic type (resolved/unresolved) to check for on record children (The rule 'type-resolved' can also be ignored as a whole)."
					},
					"VhdlLinter.style.ieeeCasing": {
						"scope": "window",
						"type": "string",
						"enum": [
							"lowercase",
							"UPPERCASE"
						],
						"default": "lowercase",
						"description": "Default casing for the completion of items of the ieee and standard libraries."
					},
					"VhdlLinter.style.unusedPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for unused objects (no unused warning is shown for these objects)"
					},
					"VhdlLinter.style.unusedSuffix": {
						"scope": "window",
						"type": "string",
						"default": "_unused",
						"description": "Prefix for unused objects (no unused warning is shown for these objects)"
					},
					"VhdlLinter.style.signalPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for signals (can be left empty)"
					},
					"VhdlLinter.style.signalSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for signals (can be left empty)"
					},
					"VhdlLinter.style.variablePrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for variables (can be left empty)"
					},
					"VhdlLinter.style.variableSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for variables (can be left empty)"
					},
					"VhdlLinter.style.objectCasing": {
						"scope": "window",
						"type": "string",
						"enum": [
							"snake_case",
							"PascalCase",
							"camelCase",
							"CONSTANT_CASE",
							"ignore"
						],
						"default": "ignore",
						"description": "Casing for all non-constant objects (signals, variables, entities etc.)."
					},
					"VhdlLinter.style.constantGenericCasing": {
						"scope": "window",
						"type": "string",
						"enum": [
							"snake_case",
							"PascalCase",
							"camelCase",
							"CONSTANT_CASE",
							"ignore"
						],
						"default": "ignore",
						"description": "Casing for constants and generics."
					},
					"VhdlLinter.style.constantPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for constants (can be left empty)"
					},
					"VhdlLinter.style.constantSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for constants (can be left empty)"
					},
					"VhdlLinter.style.genericPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for generics (can be left empty)"
					},
					"VhdlLinter.style.genericSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for generics (can be left empty)"
					},
					"VhdlLinter.style.outPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for port outputs (can be left empty)."
					},
					"VhdlLinter.style.outSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for port outputs (can be left empty)."
					},
					"VhdlLinter.style.inPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for port inputs (can be left empty)."
					},
					"VhdlLinter.style.inSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for port inputs (can be left empty)."
					},
					"VhdlLinter.style.inoutPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for port inouts (can be left empty)."
					},
					"VhdlLinter.style.inoutSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for port inouts (can be left empty)."
					},
					"VhdlLinter.style.parameterOutPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for parameter outputs (can be left empty)."
					},
					"VhdlLinter.style.parameterOutSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for parameter outputs (can be left empty)."
					},
					"VhdlLinter.style.parameterInPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for parameter inputs (can be left empty)."
					},
					"VhdlLinter.style.parameterInSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for parameter inputs (can be left empty)."
					},
					"VhdlLinter.style.parameterInoutPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "A Prefix for parameter inouts (can be left empty)."
					},
					"VhdlLinter.style.parameterInoutSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for parameter inouts (can be left empty)."
					},
					"VhdlLinter.style.labelCasing": {
						"scope": "window",
						"type": "string",
						"enum": [
							"lowercase",
							"UPPERCASE",
							"ignore"
						],
						"default": "lowercase",
						"description": "Casing for labels."
					},
					"VhdlLinter.style.instantiationLabelPrefix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Prefix for instantiation labels (can be left empty)"
					},
					"VhdlLinter.style.instantiationLabelSuffix": {
						"scope": "window",
						"type": "string",
						"default": "",
						"description": "Suffix for instantiation labels (can be left empty)"
					},
					"VhdlLinter.style.portOmission": {
						"scope": "window",
						"type": "boolean",
						"default": false,
						"description": "Enforce port omission rule: Ports may not be implicitly left unconnected. Explicit open must be used."
					}
				}
			}
		]
	},
	"activationEvents": [],
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"vscode:postpublish": "git push",
		"prepublishOnly": "npm run compile",
		"compile": "npm run settings && tsc --project .",
		"watch": "npm run settings &&tsc -w  --project  .",
		"lint": "npm run settings && eslint --ext .ts --max-warnings=0 .",
		"test": "npm run settings && jest && npm run compile && node dist/test/test.js",
		"coverage": "npm run settings && jest -c jest-coverage.config.js && xdg-open coverage/lcov-report/index.html",
		"settings": "ts-node scripts/generateSettings.ts && ts-node scripts/checkSettings.ts"
	},
	"dependencies": {
		"@commander-js/extra-typings": "^11.0.0",
		"ajv": "^8.12.0",
		"change-case": "^4.1.2",
		"chokidar": "^3.5.3",
		"commander": "^11.0.0",
		"minimatch": "^9.0.2",
		"string-similarity": "^3.0.0",
		"vscode-languageclient": "^8.1.0",
		"vscode-languageserver": "^8.1.0",
		"vscode-languageserver-textdocument": "^1.0.7",
		"yaml": "^2.3.1"
	},
	"enhancedScopes": [
		"source.vhdl"
	],
	"package-deps": [],
	"providedServices": {},
	"consumedServices": {},
	"devDependencies": {
		"@jest/globals": "^29.3.1",
		"@types/minimatch": "^5.1.2",
		"@types/node": "^16.18.3",
		"@types/string-similarity": "^3.0.0",
		"@types/vscode": "^1.42.0",
		"@typescript-eslint/eslint-plugin": "^5.53.0",
		"@typescript-eslint/parser": "^5.53.0",
		"eslint": "^8.25.0",
		"eslint-plugin-check-file": "^1.3.1",
		"jest": "^29.3.1",
		"jest-watch-typeahead": "^2.2.2",
		"p-queue": "^6.6.2",
		"pure-rand": "^6.0.2",
		"ts-jest": "^29.0.3",
		"typescript": "^4.9.5",
		"utility-types": "^3.10.0",
		"vsce": "^2.11.0",
		"vscode-oniguruma": "^1.7.0",
		"vscode-textmate": "^9.0.0"
	},
	"__metadata": {
		"id": "a14f930c-c182-41bd-8a6b-61417ee49e7e",
		"publisherDisplayName": "g0t00",
		"publisherId": "a65e6f03-3573-4dce-8df5-e0f91d80e56f"
	}
}
