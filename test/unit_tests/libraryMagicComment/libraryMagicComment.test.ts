import { afterAll, beforeAll, expect, test } from "@jest/globals";
import { writeFileSync } from "fs";
import { join } from "path";
import { pathToFileURL } from "url";
import { ProjectParser } from "../../../lib/project-parser";
import { defaultSettingsGetter } from "../../../lib/settings";
import { VhdlLinter } from "../../../lib/vhdl-linter";
import { readFileSyncNorm } from "../../readFileSyncNorm";

let projectParser: ProjectParser;
// Building test sets.
// The Entity is in library 'libA'.
// The Instantiation's architecture is placed in either libA, libB or unspecified.
// When in the instantiation a explicit library is specified, it shall match the entities (libA).
// If there is work there. The library of the instantiations architecture shall either match or be unspecified (than match is assumed)
const testSet: [string, boolean][] = [];
const targetLibraries = [undefined, 'libA', 'libB'];
const instantiationLibraries = ['work', 'libA', 'libB'];
for (const targetLibrary of targetLibraries) {
  for (const instantiationLibrary of instantiationLibraries) {
    const filename = `${targetLibrary ?? 'libUnspecified'}.${instantiationLibrary}.instantiation.vhd`;
    const shouldNotError = instantiationLibrary === 'work' ? (targetLibrary === 'libA' || targetLibrary === undefined)
      : instantiationLibrary === 'libA';
    testSet.push([filename, shouldNotError]);
    writeFileSync(join(__dirname, filename), `
    -- autogenerated do not change
    ${targetLibrary !== undefined ? `--! @library ${targetLibrary}` : ''}
library libB;
library libA;
entity test_instantiation is
end entity;
architecture arch of test_instantiation is
  begin
  label: entity ${instantiationLibrary}.test_entity;
end architecture; `);
  }
}
beforeAll(async () => {
  projectParser = await ProjectParser.create([pathToFileURL(__dirname)], '', defaultSettingsGetter);
});
afterAll(async () => {
  await projectParser.stop();
});
test.each(testSet)('Testing magic comments on file %s should not Error %p', async (filename, shouldNotError) => {

  const path = join(__dirname, filename);
  const linter = new VhdlLinter(pathToFileURL(path), readFileSyncNorm(path, { encoding: 'utf8' }), projectParser, defaultSettingsGetter);
  const messages = await linter.checkAll();
  if (shouldNotError) {
    expect(messages.length).toBe(0);
  } else {
    expect(messages.length).toBe(1);
  }

});